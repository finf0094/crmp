// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  username       String    @unique
  email          String    @unique
  sid            String?   @unique
  boughtProducts String[]
  password       String?
  provider       Provider?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  roles          Role[]
  Token          Token[]
  isBlocked      Boolean   @default(false) @map("is_blocked")

  @@map("users")
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  userAgent String   @map("user_agent")

  @@map("tokens")
}

enum Role {
  ADMIN
  USER
}

enum Provider {
  GOOGLE
  VKONTAKTE
}

model Product {
  id          String       @id @unique @default(uuid())
  name        String
  isFree      Boolean
  isPrivate   Boolean
  storeUrl    String
  libraryUrl  String
  productUrl  String
  description String
  reviews     Review[]
  price       Float
  createdAt   DateTime     @default(now())
  downloads   Int          @default(0)
  purchased   Int          @default(0)
  rating      Float        @default(0)
  discount    Float?
  screenshots Screenshot[]
  paths       Path?        @relation(fields: [pathId], references: [id])
  pathId      String?

  @@map("products")
}

model Path {
  id      String    @id @default(uuid())
  html    String
  css     String
  js      String
  Product Product[]

  @@map("paths")
}

model Screenshot {
  id        String  @id @default(uuid())
  name      String
  url       String
  productId String
  Product   Product @relation(fields: [productId], references: [id])

  @@map("screenshots")
}

model Review {
  id        String   @id @default(uuid())
  username  String
  createdAt DateTime @default(now())
  message   String
  productId String
  Product   Product  @relation(fields: [productId], references: [id])

  @@map("reviews")
}
